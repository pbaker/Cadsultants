;
; Serial Communication Routines
; for use with "C" D100 code
;
;  7/28/88 changed return code for read_host_buffer
;  8/12/88 changed baud rate code to be interactive
;  8/15/88 changed modem control byte from 9 to 11 (enable RTS)
;  9/02/88 added i/o stabilization code to read_host_buffer
;  9/14/88 removed i/o stabilization code due to unstability!
;  9/21/88 added routines to switch & clear display page (for C)
; 10/11/88 fixed XON code; wrong character being returned to "C" code
; 02/09/89 added code to close COM1
; 3/30/89  extensive changes to record line status byte
; 11/2/89 pusha & pushf added to write_host_buffer
;         this is required, else EMS driver gets messed up
; 11/2/89 assembled with 286 directive (for pusha & pushf)
; 11/14/89 James added  proc far w_flag(On/Off)  & code to RHB() for saving
;
;
;
.286c

; Equates
;
  enabled       equ   1
  disabled      equ   0
;
  host_gauge    equ   30000	;2048
;
  com1_base     equ   03F8h
  ctrl_Q        equ      17
  ctrl_S        equ      19
;
  EXTRN _check_com_status:far
  EXTRN _write_a_file:far
  EXTRN _read_a_file:far
;
_TEXT   SEGMENT  BYTE PUBLIC 'CODE'
_TEXT   ENDS

_DATA   SEGMENT  WORD PUBLIC 'DATA'

  _spos1         dw  0
  _epos1         dw  0
  _count1        dw  0

  _host_buffer   db  32000 dup (?)	;2304 dup (?)

  _gauge_status  db  0

  _write_enabled dw  disabled
  _read_enabled  dw  disabled
  _mdc_pfk_port  dw  2e8h

_DATA   ENDS

CONST   SEGMENT  WORD PUBLIC 'CONST'
CONST   ENDS

_BSS            SEGMENT  WORD PUBLIC 'BSS'
_BSS      ENDS

DGROUP  GROUP   CONST,  _BSS,   _DATA
        ASSUME  CS: _TEXT, DS: DGROUP, SS: DGROUP, ES: DGROUP

;
  _text segment
;
   public _clear_display_page, _switch_display_page
   public _open_host, _write_host_buffer, _read_host_buffer
   public _close_host
   public _ugout, _my_outp, _w_flag, _r_flag, _mdc_pfk_port
;
; --------------------------------
; routine to set the write host data flag
;
  _w_flag proc far
;
  push bp
  mov  bp,sp
  push ax
;
  mov  ax,[bp+6]                ; set up for FAR/HUGE!!!! else use bp + 4
  mov  _write_enabled,ax
;
  pop ax

  mov sp,bp
  pop bp
  ret
;
  _w_flag endp
;
; --------------------------------------------------------
; routine to set the read host data file flag
;
  _r_flag proc far
;
  push bp
  mov  bp,sp
  push ax
;
  mov  ax,[bp+6]                ; set up for FAR/HUGE!!!! else use bp + 4
  mov  _read_enabled,ax
;
  pop ax

  mov sp,bp
  pop bp
  ret
;
  _r_flag endp
;
; --------------------------------------------------------
; routine to switch menu display page
; page number is passed as integer argument from C
;
  _switch_display_page proc far
;
  push bp
  mov  bp,sp
  push ax

  mov  ax,[bp+6]                ; set up for FAR/HUGE!!!! else use bp + 4
  mov  ah,5
  int  10h

  pop  ax
  mov  sp,bp
  pop  bp

  ret
;
  _switch_display_page   endp
; --------------------------------------------------------
; routine to clear current PC display from C
;
 _clear_display_page proc far

  push bp
  mov  bp,sp

  push ax
  push bx
  push cx
  push dx

  mov  al,0     ; blank entire screen
  mov  bh,15    ; color is white
  mov  ch,0     ; upper left row
  mov  cl,0     ; upper left column
  mov  dh,23    ; lower right row
  mov  dl,79    ; lower right column
  mov  ah,6     ; scroll up function
  int  10h      ; BIOS call

  pop  dx
  pop  cx
  pop  bx
  pop  ax

  mov  sp,bp
  pop  bp
  ret

 _clear_display_page endp
; --------------------------------------------------------
; routine to transmit a character out "_mdc_pfk_port" port from C
; 
  _my_outp proc far
;
  push bp
  mov  bp,sp

  push ax
  push dx
  push ds

  mov ax,dgroup
  mov ds,ax
;
 get_stat1:

  mov  dx,_mdc_pfk_port
  add  dx,5             ; point to line status register
  in   al,dx            ; get status byte
  test al,32            ; check for hold register empty
  jz   get_stat1        ; loop until okay to send
;
  mov  dx,_mdc_pfk_port       ; point to data register
  mov  ax,[bp+6]        ; set up for FAR/HUGE, else use bp + 4
  out  dx,al            ; output character in al
;
  pop  ds
  pop  dx
  pop  ax

  mov  sp,bp
  pop  bp

  ret
;
  _my_outp   endp
; --------------------------------------------------------
; routine to transmit a character out COM1 from C
; 
  _ugout proc far
;
  push bp
  mov  bp,sp

  push ax
  push dx
;
;
  push ds
;
  mov  ax,dgroup
  mov  ds,ax
;
  cmp _read_enabled,disabled
  je ugout_start;
;
  pop ds
  jmp return_of_ugout
;
;
 ugout_start:
  pop ds
;
;
 get_stat:
;
  mov  dx,com1_base + 5 ; point to line status register for COM1
  in   al,dx            ; get status byte
  test al,32            ; check for hold register empty
  jz   get_stat         ; loop until okay to send
;
  mov  dx,com1_base  ; point to data register
  mov  ax,[bp+6]     ; set up for FAR/HUGE, else use bp + 4
  out  dx,al         ; output character in al
;
;
;
return_of_ugout:
  pop  dx
  pop  ax

  mov  sp,bp
  pop  bp

  ret
;
  _ugout   endp
; --------------------------------------------------------------
  _close_host  proc far

  push bp
  mov  bp,sp

  push ax
  push dx

; clear COM1 port...

  mov dx,03F9h                          ; point to Interrupt Enable register
  mov al,0h                             ; clear interrupt on Received Data
  out dx,al                             ; Interrupt now disabled at com1 ACE
;
; then, disable 8259 interrupt chip for IRQ4
;
  in  al,21h                            ; 8259 mask register
  and al,11101111b                      ; 0 at bit 4 to enabled
  or  al,00010000b                      ; 1 at bit 4 to disable
  out 21h,al                            ; interrupt masked (turned off)

  pop  dx
  pop  ax
;
  mov  sp,bp
  pop  bp
;
 ret
;
  _close_host  endp
; -------------------------------------------------------------------
; initialize host communication port
;
  _open_host proc far
;
  push bp
  mov  bp,sp
;
  push ax
  push dx
  push ds
;
; Set communication parameters
;
  mov  dx,03F8h + 3
  mov  al,80h
  out  dx,al

  mov  ax,[bp+6]                ; set up for FAR/HUGE!!!! else use bp + 4
  mov  dx,03F8h
  out  dx,al

  mov  al,ah
  inc  dx
  out  dx,al

  mov  dx,03F8h + 3
  mov  al,00000011b
  out  dx,al
;
; set com1 interrupt handler address
;
  push cs
  pop  ds                                        ; DS is segment of interrupt handler
  mov  dx,offset _write_host_buffer              ; DX is offset
  mov  al,0Ch                                    ; com1 interrupt is 0C hex
  mov  ah,25h                                    ; DOS function to set interrupt vector
  int  21h                                       ; 
;
; clear port...

  mov dx,03F9h                          ; point to Interrupt Enable register
  mov al,0h                             ; clear interrupt on Received Data
  out dx,al                             ; Interrupt now disabled at com1 ACE
;
; then, disable 8259 interrupt chip for IRQ4
;
  in  al,21h                            ; 8259 mask register
  and al,11101111b
  or  al,00010000b                      ; 1 at bit 4
  out 21h,al                            ; interrupt masked (turned off)
;
; Now, enable com1 ACE
;
  mov dx,03F9h                          ; point to Interrupt Enable register
  mov al,1                              ; set to interrupt on Received Data
  out dx,al                             ; Interrupt now enabled at com1 ACE
;
  mov dx,03FCh                          ; modem control register
  mov al,11
  out dx,al
;
; enable 8259 interrupt chip for IRQ4
;
  in  al,21h                            ; 8259 mask register
  and al,11101111b                      ; 0 at bit 4
  out 21h,al                            ; interrupt unmasked 
;
  pop  ds
  pop  dx
  pop  ax
;
  mov  sp,bp
  pop  bp
;
 ret
;
  _open_host  endp
; --------------------------------------------------------------
 _write_host_buffer proc far
;
;  push  ax
;  push  dx
;  push  ds
;  push  si
 
  push ds
  push es
  push si
  push di
  pusha
  pushf

  mov  ax,dgroup
  mov  ds,ax

  mov   dx,3fdh  ; line status register
  in    al,dx    ; get status byte
  test  al,01h   ; check for character received
  jnz   get_data ; if so, read & store
;
; else, if no character received, report line status & exit
;
  sub   ah,ah
  push  ax
  call  _check_com_status
  add   sp,2
  jmp   b1_end   ; if no character, return

get_data:

; store status byte

  mov  si,_epos1
  mov  _host_buffer[si],al
  inc  _epos1
;
  mov   dx,3f8h  ; received data register
  in    al,dx    ; get character
;
  mov  si,_epos1   
  mov  _host_buffer[si],al     ; write character to buffer
  inc  _epos1                  ; increment pointer

  inc  _count1                 ; increment count
;
  mov  ax,_epos1               ; check for buffer near full
  cmp  ax,host_gauge
  jbe  b1_end

  mov  al,ctrl_S
  push ax
  call _ugout
  add  sp,2
  mov  _gauge_status,1         ; status is near full
;
 b1_end:
;
  mov  al,20h
  out  20h,al

  popf
  popa
  pop  di
  pop  si
  pop  es
  pop  ds

;  pop  si
;  pop  ds
;  pop  dx
;  pop  ax

  iret
;  
  _write_host_buffer endp
;
; ------------------------------------------------------
;
  _read_host_buffer  proc far
;
  push bp
  mov  bp,sp
;
  push bx
  push ds

  mov  ax,dgroup
  mov  ds,ax
;
; read from a file?
;
  cmp  _read_enabled,disabled
  je   skip_read
  call _read_a_file
  jmp  exit1

skip_read:

  cmp  _count1,0
  jne  readit

; 7/28/88 change return code to -1 (was 0)
;
  mov  ax,-1
  jmp  exit1
;
 readit:
;
; read status byte
;
  mov  bx,_spos1
  mov  al,_host_buffer[bx]
  inc  _spos1
;
; call C routine to check (and report) line errors

  sub  ah,ah
  push ax
  call _check_com_status
  add  sp,2
;
; get character
;
  mov  bx,_spos1
  mov  al,_host_buffer[bx]
  inc  _spos1
;
; should we write to a file?
;
  cmp _write_enabled,disabled
  je just_return
;
; yes!
; 
  push ax			; save character
;
; send to write file routine

  push ax
  call _write_a_file
  add sp,2

  pop  ax			; restore character

just_return:
 
; reduce buffer size by 1 character
;
  cli
  dec  _count1
;
; check for empty buffer
;
  cmp  _count1,0
  je   init1

exit1:

  sti
;
  pop  ds
  pop  bx

  mov  sp,bp
  pop  bp
  ret
;
 init1:
;
; buffer is empty. reset all control variables
;
  mov  _spos1,0
  mov  _epos1,0
  sti
;
; check for previous XOFF to host due to buffer full
;
  cmp  _gauge_status,0
  je   exit1
;
; host was paused; start up host again
;
  push ax                       ; save character
  mov  _gauge_status,0          ; reset buffer gauge
;
; send XON to host
;
  mov  al,ctrl_Q
  push ax
  call _ugout
  add  sp,2

  pop  ax                        ; restore character
  jmp  exit1
;
  _read_host_buffer endp

_text ends
      end
